package com.amdocs.digital.ms.orderexecution.orderresolver.ck.resources.config;

import java.util.Optional;
import javax.inject.Inject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.retry.annotation.EnableRetry;

import feign.Feign;
import feign.Request.Options;
import feign.jackson.JacksonDecoder;
import feign.jackson.JacksonEncoder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory; 

import com.amdocs.digital.ms.orderexecution.orderresolver.ck.resources.OrderexecutionOrderresolverServiceClientErrorDecoder;
import com.amdocs.digital.ms.orderexecution.orderresolver.ck.resources.OrderexecutionOrderresolverServiceFakeJwtAuthorization;
import com.amdocs.digital.ms.orderexecution.orderresolver.ck.resources.OrderexecutionOrderresolverServiceApiWithRetryImpl;
import com.amdocs.digital.ms.orderexecution.orderresolver.ck.resources.interfaces.OrderexecutionOrderresolverServiceApi;
import com.amdocs.digital.ms.orderexecution.orderresolver.ck.resources.interfaces.OrderexecutionOrderresolverServiceApiWithRetry;
import com.amdocs.msbase.resource.lock.interfaces.IEtagRequestMapper;
import com.amdocs.msbase.resource.header.interfaces.IResponseMapper;
import com.amdocs.msbase.resource.header.interfaces.IRequestHeadersInterceptor;
import com.amdocs.msnext.securityjwt.JwtServiceFeignRequestInterceptor;
import com.amdocs.msnext.securityjwt.JwtServiceTokenProvider;

@EnableRetry
@Configuration
@EnableConfigurationProperties
public class OrderexecutionOrderresolverServiceApiConfig {

  private static final Logger logger = LoggerFactory.getLogger(OrderexecutionOrderresolverServiceApiConfig.class);
  
  @Value("${com.amdocs.msnext.securityjwt.jwt.validation.type:REAL}")
  private String validationType;
  
  //get the feign builder which supports Sleuth/Hystrix
  @Inject
  Feign.Builder fb;
  
  @Inject
  IResponseMapper responseMapper;
  
  @Inject
  IEtagRequestMapper etagRequestInterceptor;
  
  @Inject
  IRequestHeadersInterceptor requestHeadersInterceptor;
  
  @Inject
  private Optional<JwtServiceTokenProvider> jwtServiceTokenProvider;

  
  @Bean
  public OrderexecutionOrderresolverServiceApi beanConfigOrderexecutionOrderresolverServiceApi()
  {
      //client API generated by swagger
      com.amdocs.digital.ms.orderexecution.orderresolver.ck.resources.ApiClient apiCli = new com.amdocs.digital.ms.orderexecution.orderresolver.ck.resources.ApiClient();
      //set the configured server url
      apiCli.setBasePath(orderexecutionOrderresolverServiceConfiguration().getUrl());
      // add the encode/decoder from the original builder to the injected feign builder.
      ObjectMapper objMapperCopy = apiCli.getObjectMapper().copy();
      
      fb.encoder(new JacksonEncoder(objMapperCopy));
      fb.mapAndDecode(responseMapper::map, new JacksonDecoder(apiCli.getObjectMapper()));
      fb.errorDecoder(new OrderexecutionOrderresolverServiceClientErrorDecoder(apiCli.getObjectMapper()));
      fb.requestInterceptor(etagRequestInterceptor);
      fb.requestInterceptor(requestHeadersInterceptor);
      fb.options(new Options(orderexecutionOrderresolverServiceConfiguration().getFeignConnectTimeOutMillis(), orderexecutionOrderresolverServiceConfiguration().getFeignReadTimeoutMillis()));
	

        if("FAKE".equals(validationType)) {
           fb.requestInterceptor(new OrderexecutionOrderresolverServiceFakeJwtAuthorization());
        } else {
          if(jwtServiceTokenProvider.isPresent()) {
             fb.requestInterceptor(JwtServiceFeignRequestInterceptor.builder().serviceJwtProvider(jwtServiceTokenProvider.get()).build());
          } else {
             logger.warn("No bearer token is being added to the feign request, this might be due to not " +
             "setting the 'com.amdocs.msnext.securityjwt.jwt.validation.type' to 'FAKE' or "+
             "no bean of type com.amdocs.msnext.securityjwt.JwtServiceTokenProvider was found");
          }
        }

      logger.debug("Feign.Builder instance is of {}", fb.getClass().getCanonicalName());
      
      //set the injected feign builder on the client api
      apiCli.setFeignBuilder(fb);
      return apiCli.buildClient(OrderexecutionOrderresolverServiceApi.class);
  }
  
  @Bean
  public OrderexecutionOrderresolverServiceApiConfiguration orderexecutionOrderresolverServiceConfiguration() {
      return new OrderexecutionOrderresolverServiceApiConfiguration();
  }
  @Bean
  @Primary
  public OrderexecutionOrderresolverServiceApiWithRetry orderexecutionOrderresolverServiceWithRetry() {
      return new OrderexecutionOrderresolverServiceApiWithRetryImpl();
  }
}